local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Redux = require(ReplicatedStorage.Redux)

local deepEquals = require(script.Parent.helpers.deepEquals)

return function()
	describe("createAction", function()
		it("should create an action", function()
			local actionCreator = Redux.createAction("A_TYPE")
			expect(deepEquals(actionCreator("something"), {
				type = "A_TYPE",
				payload = "something",
			})).to.equal(true)
		end)

		describe("when stringifying action", function()
			it("should return the action type", function()
				local actionCreator = Redux.createAction("A_TYPE")
				expect(tostring(actionCreator)).to.equal("A_TYPE")
			end)
		end)

		describe("when passing a prepareAction method returning a payload and meta", function()
			it("should use the payload returned from the prepareAction method", function()
				local actionCreator = Redux.createAction("A_TYPE", function(a: number)
					return {
						payload = a * 2,
						meta = a / 2,
					}
				end)

				expect(actionCreator(5).payload).to.equal(10)
			end)

			it("should use the meta returned from the prepareAction method", function()
				local actionCreator = Redux.createAction("A_TYPE", function(a: number)
					return {
						payload = a * 2,
						meta = a / 2,
					}
				end)

				expect(actionCreator(10).meta).to.equal(5)
			end)
		end)

		describe("when passing a prepareAction method returning a payload and error", function()
			it("should use the payload returned from the prepareAction method", function()
				local actionCreator = Redux.createAction("A_TYPE", function(a: number)
					return {
						payload = a * 2,
						error = true,
					}
				end)

				expect(actionCreator(5).payload).to.equal(10)
			end)

			it("should use the error returned from the prepareAction method", function()
				local actionCreator = Redux.createAction("A_TYPE", function(a: number)
					return {
						payload = a * 2,
						error = true,
					}
				end)

				expect(actionCreator(10).error).to.equal(true)
			end)
		end)

		describe("when passing a prepareAction method returning a payload, meta and error", function()
			it("should use the payload returned from the prepareAction method", function()
				local actionCreator = Redux.createAction("A_TYPE", function(a: number)
					return {
						payload = a * 2,
						meta = a / 2,
						error = true,
					}
				end)

				expect(actionCreator(5).payload).to.equal(10)
			end)

			it("should use the error returned from the prepareAction method", function()
				local actionCreator = Redux.createAction("A_TYPE", function(a: number)
					return {
						payload = a * 2,
						meta = a / 2,
						error = true,
					}
				end)

				expect(actionCreator(10).error).to.equal(true)
			end)

			it("should use the meta returned from the prepareAction method", function()
				local actionCreator = Redux.createAction("A_TYPE", function(a: number)
					return {
						payload = a * 2,
						meta = a / 2,
						error = true,
					}
				end)

				expect(actionCreator(10).meta).to.equal(5)
			end)
		end)

		describe("when passing a prepareAction that accepts multiple arguments", function()
			it("should pass all arguments of the resulting actionCreator to prepareAction", function()
				local actionCreator = Redux.createAction("A_TYPE", function(a: string, b: string, c: string)
					return {
						payload = `{a}{b}{c}`,
					}
				end)

				expect(actionCreator("1", "2", "3").payload).to.equal("123")
			end)
		end)

		describe("actionCreator.match", function()
			it("should return true for actions generated by own actionCreator", function()
				local actionCreator = Redux.createAction("test")
				expect(actionCreator.match(actionCreator())).to.equal(true)
			end)

			it("should return true for matching actions", function()
				local actionCreator = Redux.createAction("test")
				expect(actionCreator.match({ type = "test" })).to.equal(true)
			end)

			it("should return false for other actions", function()
				local actionCreator = Redux.createAction("test")
				expect(actionCreator.match({ type = "test-abc" })).to.equal(false)
			end)
		end)
	end)

	describe("isAction", function()
		it("should only return true for plain objects with a type property", function() end)
	end)
end
